[{"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\index.js":"1","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\reportWebVitals.js":"2","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\App.js":"3","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\AddNote.js":"4","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\ListNotes.js":"5","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\Search.js":"6","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\data\\data.js":"7","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\Category.js":"8","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\AddCategory.js":"9","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\NoteItem.js":"10"},{"size":472,"mtime":1609727283511,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1608532810965,"results":"13","hashOfConfig":"12"},{"size":7874,"mtime":1609812775199,"results":"14","hashOfConfig":"12"},{"size":6666,"mtime":1609754732235,"results":"15","hashOfConfig":"12"},{"size":1084,"mtime":1609751311947,"results":"16","hashOfConfig":"12"},{"size":710,"mtime":1609143606369,"results":"17","hashOfConfig":"12"},{"size":2098,"mtime":1609237705229,"results":"18","hashOfConfig":"12"},{"size":2100,"mtime":1609727070387,"results":"19","hashOfConfig":"12"},{"size":1944,"mtime":1609230008012,"results":"20","hashOfConfig":"12"},{"size":1661,"mtime":1609749642960,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"15sdytm",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\index.js",[],["49","50"],"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\reportWebVitals.js",[],"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\App.js",["51","52","53","54","55"],"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\AddNote.js",["56","57","58","59"],"import React, { useEffect, useState } from 'react';\r\nimport { Form, Modal, Button, Input, Select, message, Divider } from 'antd';\r\nimport { FormOutlined, PlusOutlined, FileAddOutlined } from '@ant-design/icons';\r\nimport './AddForm.css'\r\nimport moment from 'moment'\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n};\r\n\r\nfunction AddNote(props) {\r\n    const [form] = Form.useForm();\r\n\r\n    const[newCate, setNewCate] = useState('')\r\n    const [category, setCategory] = useState([])\r\n\r\n    const {\r\n        openAddNote,\r\n        closeAddNote,\r\n        isOpenAddNote,\r\n        // openAddCate,\r\n        addNote,\r\n        note,\r\n        editNote,\r\n        isActive,   \r\n    } = props\r\n    useEffect(() => {\r\n        setCategory(props.category)\r\n    }, [props.category])\r\n\r\n    useEffect(() => {\r\n        if (props.note.id) {\r\n            console.log(\"values: \", note)\r\n            const values = {\r\n                id: note.id,\r\n                title: note.title,\r\n                content: note.content,\r\n                cateId: note.category.id,\r\n                date: note.date\r\n            }\r\n            form.setFieldsValue(values)\r\n        }\r\n    }, [note.id]);\r\n\r\n    const showModal = () => {\r\n        openAddNote();\r\n    };\r\n    const handleOk = () => {\r\n        closeAddNote();\r\n        clearFormValues();\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        closeAddNote();\r\n        clearFormValues();\r\n    };\r\n\r\n    const clearFormValues = () => {\r\n        form.resetFields();\r\n        console.log(form)\r\n    }\r\n\r\n\r\n    const getCategoryById = cateId => {\r\n        const index = category.findIndex(x => x.id === cateId)\r\n        return category[index]\r\n    }\r\n\r\n    const genNewId = () => Math.random().toString(36).substr(2, 23)\r\n\r\n    function handleAddcategory() {\r\n        try {\r\n            if(newCate.length > 0) {\r\n            const newcategory = {\r\n                id: genNewId(),\r\n                title: newCate\r\n            }\r\n            console.log(newcategory)\r\n            const newListCate = [...category]\r\n            newListCate.push(newcategory)\r\n            setCategory(newListCate)\r\n            }\r\n        } catch(e) {\r\n            message.error(e)\r\n        }\r\n    }\r\n\r\n    const onFinish = values => {\r\n        const noteCate = getCategoryById(values.cateId)\r\n        const newNote = {\r\n            title: values.title,\r\n            category: noteCate,\r\n            content: values.content,\r\n        }\r\n        if (note.id) {\r\n            newNote[\"id\"] = note.id\r\n            newNote[\"date\"] = note.date\r\n            newNote[\"modifyDate\"] = moment().format('DD/MM/YYYY')\r\n            editNote(newNote)\r\n        } else {\r\n            newNote[\"id\"] = genNewId()\r\n            newNote[\"date\"] = moment().format('DD/MM/YYYY')\r\n            addNote(newNote);\r\n        }\r\n        closeAddNote();\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    // const showCategoryModal = () => {\r\n    //     openAddCate();\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <Button className=\"title-button\" icon={<FormOutlined />} onClick={showModal}>\r\n            </Button>\r\n            <Modal\r\n                title={!note.id ? \"Add A Note\" : \"Edit Note\"}\r\n                visible={isOpenAddNote}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                footer={[\r\n                    <Button form=\"add-note\" type=\"primary\" key=\"submit\" htmlType=\"submit\">\r\n                        OK\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <Form\r\n                    {...layout}\r\n                    name=\"note\"\r\n                    id=\"add-note\"\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                    form={form}\r\n                >\r\n                    <Form.Item\r\n                        label=\"title\"\r\n                        name=\"title\"\r\n                        // initialValues={note.title}\r\n                        rules={[{ required: true, message: 'Please input note title!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Category\"\r\n                        name=\"cateId\"\r\n                        // value={note.category.id}\r\n                        rules={[{ required: true, message: 'Please select category!' }]}\r\n                    >\r\n                        <Select \r\n                            style={{ width: \"50%\" }} \r\n                            placeholder=\"Select category\"\r\n                            dropdownRender={menu => (\r\n                                <div>\r\n                                    {menu}\r\n                                    <Divider style={{ margin: '4px 0' }} />\r\n                                    <div style={{ display: 'flex', flexWrap: 'nowrap', padding:'0 8px', height: '30px' }}>\r\n                                    <Input style={{ flex: 'auto' }} onChange={(e) => setNewCate(e.target.value)} />\r\n                                        <a\r\n                                            style={{ flex: 'none', paddingLeft: '8px', display: 'block', cursor: 'pointer' }}\r\n                                            // onClick={this.addItem}\r\n                                        >\r\n                                            <Button  icon={<FileAddOutlined />} onClick={handleAddcategory}>\r\n                                            </Button>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                                )}\r\n                        >\r\n                            {category.map((cate) => (\r\n                                <Option key={cate.id} value={cate.id} >{cate.title}</Option>\r\n                            ))}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {/* <Button style={{margin: \"0 10px\"}}  icon={<FileAddOutlined />} onClick={showCategoryModal}>\r\n                            </Button> */}\r\n                    <Form.Item\r\n                        label=\"Content\"\r\n                        name=\"content\"\r\n                        // initialValues={note.content}\r\n                        rules={[{ required: true, message: 'Please input content!' }]}\r\n                    >\r\n                        \r\n                        <Input.TextArea rows={4}/>\r\n                    </Form.Item>\r\n\r\n\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddNote;","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\ListNotes.js",["60"],"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NoteItem from './NoteItem';\r\nimport { Col, Row } from \"antd\";\r\nimport './ListNotes.css'\r\n\r\nListNotes.propTypes = {\r\n    // note: PropTypes.object,\r\n    // category: PropTypes.array,\r\n    listNotes: PropTypes.array,\r\n    deleteNote: PropTypes.func,\r\n};\r\n\r\nListNotes.defaultProps = {\r\n    // note: {},\r\n    // category: [],\r\n    listNotes: [],\r\n    deleteNote: null,\r\n}\r\n\r\n\r\n\r\nfunction ListNotes(props) {\r\n    const {  listNotes, deleteNote, onEditNoteClick } = props\r\n    \r\n    return (\r\n        <>\r\n            <Row className=\"notes-container\" justify=\"center\">\r\n                {listNotes.map((note) => {\r\n                    return (\r\n                        <Col xl={6} md={8} sm={12} xs={24} className=\"product-col\" key={note.id} >\r\n                            <NoteItem  note={note} deleteNote={deleteNote} onEditNoteClick={onEditNoteClick} />\r\n                        </Col>\r\n                    )\r\n                })}\r\n            </Row>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ListNotes;","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\Search.js",[],"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\data\\data.js",[],"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\Category.js",["61","62"],"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./Category.css\"\r\n// import { FileAddOutlined } from '@ant-design/icons';\r\n// import { Button } from 'antd';\r\n\r\nCategory.propTypes = {\r\n    category: PropTypes.array,\r\n    isActiveted: PropTypes.number,\r\n    // onDeleteClick: PropTypes.func,\r\n    onNoteClick: PropTypes.func,\r\n    displayNoteByCate: PropTypes.func,\r\n\r\n};\r\nCategory.defaultProps = {\r\n    category: [],\r\n    isActiveted: 0,\r\n    onDeleteClick: null,\r\n    onNoteClick: null,\r\n    displayNoteByCate: null,\r\n}\r\n function Category(props) {\r\n    const [isActiveted, setIsActiveted] = useState(0)\r\n    const { onDeleClick, onNoteClick, category, displayNoteByCate, openModal } = props;\r\n\r\n    // function handleDelete(note) {\r\n    //     if (onDeleClick) {\r\n    //       onDeleClick(note)\r\n    //     }\r\n    //   }\r\n    function handleClickNote(cate) {\r\n        if (onNoteClick) {\r\n            if (cate.id !== isActiveted) {\r\n                onNoteClick(cate.title)\r\n                setIsActiveted(cate.id);\r\n                displayNoteByCate(cate.id)\r\n            }\r\n            else {\r\n                setIsActiveted(0)\r\n                onNoteClick('All notes')\r\n                displayNoteByCate(0)\r\n            }\r\n         \r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    const showModal = () => {\r\n        openModal();\r\n    };\r\n    \r\n    return (\r\n        <div className=\"category\">\r\n            <div className=\"title-sidebar\">\r\n                <h2 className=\"title-cate\"> Category</h2>\r\n                {/* <Button className=\"title-button\"  icon={<FileAddOutlined />} onClick={showModal}>\r\n                </Button> */}\r\n            </div>\r\n            <ul className=\"category-items\">\r\n            {\r\n\r\n                category.map(cate => (\r\n                    <li className={ (isActiveted === cate.id)? 'item--active': ''} key={cate.id} onClick={()=> handleClickNote(cate)}>\r\n                        {cate.title}\r\n                     </li>\r\n                ))\r\n            }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default Category;","D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\AddCategory.js",["63"],"import React from 'react';\r\nimport { Form, Modal, Button, Input, Col, message } from 'antd';\r\n\r\n\r\n\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n};\r\n//   const tailLayout = {\r\n//     wrapperCol: { offset: 8, span: 16 },\r\n//   };\r\n\r\nfunction AddCategory(props) {\r\n\r\n    const { closeModal, isModalVisible, addCategory, nextId } = props\r\n\r\n    const handleOk = () => {\r\n        closeModal();\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        closeModal();\r\n    };\r\n\r\n\r\n    const onFinish = values => {\r\n        const newCate = {\r\n            id: nextId,\r\n            title: values.title\r\n        }\r\n        addCategory(newCate);\r\n        message.success(\"Category added successfully\")\r\n        closeModal();\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Modal \r\n                title=\"Add A Category\" \r\n                visible={isModalVisible} \r\n                onOk={handleOk} \r\n                onCancel={handleCancel}\r\n                footer={[\r\n                    <Button form=\"add-category\" type=\"primary\" key=\"submit\" htmlType=\"submit\">\r\n                        OK\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <Form id=\"add-category\"\r\n                    {...layout}\r\n                    name=\"category\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                >\r\n                    <Form.Item \r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        rules={[{ required: true, message: 'Please input title!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCategory;",["64","65"],"D:\\Congty\\Fabbi\\Notebook-Fabbi\\src\\components\\NoteItem.js",["66","67"],"import React from 'react';\r\nimport { Button, message } from 'antd'\r\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\r\n\r\nfunction NoteItem(props) {\r\n    const { note, deleteNote, onEditNoteClick, keyItem, isActive } = props\r\n\r\n\r\n    function handleDeleteNote(noteId) {\r\n      if(noteId) {\r\n        deleteNote(noteId);\r\n      }\r\n      else {\r\n        message.error(\"Note does not exist!\")\r\n      }\r\n    }\r\n\r\n    function handleEditNote(noteId) {\r\n      if(noteId) {\r\n        onEditNoteClick(noteId)\r\n      }\r\n      else {\r\n        message.error(\"Note does not exist!\")\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\"\r\n            integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\"\r\n            crossOrigin=\"anonymous\"\r\n          />\r\n          <div className= \"card\">\r\n            <div className=\"card__inner\">\r\n              <h5>{note.date}</h5>\r\n              <h3>{note.title}</h3>\r\n              <p>\r\n                {note.content}\r\n              </p>\r\n             \r\n            </div>\r\n            <div className=\"card__inner--icon\">\r\n                <Button onClick={()=> handleEditNote(note.id)} className=\"button--icon\" type=\"text\" style={{ margin: \"0 5px 0 0\"}} icon={<EditOutlined />} >\r\n                </Button> \r\n                <Button onClick={()=> handleDeleteNote(note.id)} className=\"button--icon\" type=\"text\" icon={<DeleteOutlined />} >\r\n                </Button>\r\n              </div>\r\n          </div>\r\n          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoteItem;",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":7,"column":10,"nodeType":"74","messageId":"75","endLine":7,"endColumn":14},{"ruleId":"72","severity":1,"message":"76","line":23,"column":10,"nodeType":"74","messageId":"75","endLine":23,"endColumn":23},{"ruleId":"77","severity":1,"message":"78","line":50,"column":6,"nodeType":"79","endLine":50,"endColumn":8,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":100,"column":27,"nodeType":"83","messageId":"84","endLine":100,"endColumn":29},{"ruleId":"72","severity":1,"message":"85","line":136,"column":12,"nodeType":"74","messageId":"75","endLine":136,"endColumn":24},{"ruleId":"72","severity":1,"message":"86","line":3,"column":24,"nodeType":"74","messageId":"75","endLine":3,"endColumn":36},{"ruleId":"72","severity":1,"message":"87","line":29,"column":9,"nodeType":"74","messageId":"75","endLine":29,"endColumn":17},{"ruleId":"77","severity":1,"message":"88","line":47,"column":8,"nodeType":"79","endLine":47,"endColumn":17,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":166,"column":41,"nodeType":"92","endLine":169,"endColumn":42},{"ruleId":"72","severity":1,"message":"93","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"72","severity":1,"message":"94","line":24,"column":13,"nodeType":"74","messageId":"75","endLine":24,"endColumn":24},{"ruleId":"72","severity":1,"message":"95","line":49,"column":11,"nodeType":"74","messageId":"75","endLine":49,"endColumn":20},{"ruleId":"72","severity":1,"message":"96","line":2,"column":38,"nodeType":"74","messageId":"75","endLine":2,"endColumn":41},{"ruleId":"68","replacedBy":"97"},{"ruleId":"70","replacedBy":"98"},{"ruleId":"72","severity":1,"message":"99","line":6,"column":48,"nodeType":"74","messageId":"75","endLine":6,"endColumn":55},{"ruleId":"72","severity":1,"message":"87","line":6,"column":57,"nodeType":"74","messageId":"75","endLine":6,"endColumn":65},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","'isOpenAddCate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["102"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'closeAddCate' is defined but never used.","'PlusOutlined' is defined but never used.","'isActive' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form', 'note', and 'props.note.id'. Either include them or remove the dependency array.",["103"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'onDeleClick' is assigned a value but never used.","'showModal' is assigned a value but never used.","'Col' is defined but never used.",["100"],["101"],"'keyItem' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [fetchData]",{"range":"108","text":"109"},"Update the dependencies array to be: [form, note, note.id, props.note.id]",{"range":"110","text":"111"},[1428,1430],"[fetchData]",[1213,1222],"[form, note, note.id, props.note.id]"]